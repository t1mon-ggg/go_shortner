// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        models "github.com/t1mon-ggg/go_shortner/app/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
        ctrl     *gomock.Controller
        recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
        mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
        mock := &MockStorage{ctrl: ctrl}
        mock.recorder = &MockStorageMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
        return m.recorder
}

// Cleaner mocks base method.
func (m *MockStorage) Cleaner(arg0 <-chan models.DelWorker, arg1 int) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Cleaner", arg0, arg1)
}

// Cleaner indicates an expected call of Cleaner.
func (mr *MockStorageMockRecorder) Cleaner(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleaner", reflect.TypeOf((*MockStorage)(nil).Cleaner), arg0, arg1)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Close")
        ret0, _ := ret[0].(error)
        return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Ping mocks base method.
func (m *MockStorage) Ping() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Ping")
        ret0, _ := ret[0].(error)
        return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping))
}

// ReadByCookie mocks base method.
func (m *MockStorage) ReadByCookie(arg0 string) (models.ClientData, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ReadByCookie", arg0)
        ret0, _ := ret[0].(models.ClientData)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ReadByCookie indicates an expected call of ReadByCookie.
func (mr *MockStorageMockRecorder) ReadByCookie(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByCookie", reflect.TypeOf((*MockStorage)(nil).ReadByCookie), arg0)
}

// ReadByTag mocks base method.
func (m *MockStorage) ReadByTag(arg0 string) (models.ShortData, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ReadByTag", arg0)
        ret0, _ := ret[0].(models.ShortData)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ReadByTag indicates an expected call of ReadByTag.
func (mr *MockStorageMockRecorder) ReadByTag(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByTag", reflect.TypeOf((*MockStorage)(nil).ReadByTag), arg0)
}

// TagByURL mocks base method.
func (m *MockStorage) TagByURL(arg0, arg1 string) (string, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "TagByURL", arg0, arg1)
        ret0, _ := ret[0].(string)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// TagByURL indicates an expected call of TagByURL.
func (mr *MockStorageMockRecorder) TagByURL(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagByURL", reflect.TypeOf((*MockStorage)(nil).TagByURL), arg0, arg1)
}

// Write mocks base method.
func (m *MockStorage) Write(arg0 models.ClientData) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Write", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStorageMockRecorder) Write(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorage)(nil).Write), arg0)
}