// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: app/grpc/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	SimpleShort(ctx context.Context, in *SimpleShortRequest, opts ...grpc.CallOption) (*SimpleShortResponse, error)
	SimpleUnshort(ctx context.Context, in *SimpleUnshortRequest, opts ...grpc.CallOption) (*SimpleUnshortResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	APIUserURLs(ctx context.Context, in *APIUserURLRequest, opts ...grpc.CallOption) (*APIUserURLResponse, error)
	APIStats(ctx context.Context, in *APIStatsRequest, opts ...grpc.CallOption) (*APIStatsResponse, error)
	APIShort(ctx context.Context, in *APIShortRequest, opts ...grpc.CallOption) (*APIShortResponse, error)
	APIBatchShort(ctx context.Context, in *APIBatchShortRequest, opts ...grpc.CallOption) (*APIBatchShortResponse, error)
	APIUserShortDelete(ctx context.Context, in *APIUserShortDeleteRequest, opts ...grpc.CallOption) (*APIUserShortDeleteResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) SimpleShort(ctx context.Context, in *SimpleShortRequest, opts ...grpc.CallOption) (*SimpleShortResponse, error) {
	out := new(SimpleShortResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/SimpleShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) SimpleUnshort(ctx context.Context, in *SimpleUnshortRequest, opts ...grpc.CallOption) (*SimpleUnshortResponse, error) {
	out := new(SimpleUnshortResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/SimpleUnshort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) APIUserURLs(ctx context.Context, in *APIUserURLRequest, opts ...grpc.CallOption) (*APIUserURLResponse, error) {
	out := new(APIUserURLResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/APIUserURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) APIStats(ctx context.Context, in *APIStatsRequest, opts ...grpc.CallOption) (*APIStatsResponse, error) {
	out := new(APIStatsResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/APIStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) APIShort(ctx context.Context, in *APIShortRequest, opts ...grpc.CallOption) (*APIShortResponse, error) {
	out := new(APIShortResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/APIShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) APIBatchShort(ctx context.Context, in *APIBatchShortRequest, opts ...grpc.CallOption) (*APIBatchShortResponse, error) {
	out := new(APIBatchShortResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/APIBatchShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) APIUserShortDelete(ctx context.Context, in *APIUserShortDeleteRequest, opts ...grpc.CallOption) (*APIUserShortDeleteResponse, error) {
	out := new(APIUserShortDeleteResponse)
	err := c.cc.Invoke(ctx, "/grpc.Shortener/APIUserShortDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	SimpleShort(context.Context, *SimpleShortRequest) (*SimpleShortResponse, error)
	SimpleUnshort(context.Context, *SimpleUnshortRequest) (*SimpleUnshortResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	APIUserURLs(context.Context, *APIUserURLRequest) (*APIUserURLResponse, error)
	APIStats(context.Context, *APIStatsRequest) (*APIStatsResponse, error)
	APIShort(context.Context, *APIShortRequest) (*APIShortResponse, error)
	APIBatchShort(context.Context, *APIBatchShortRequest) (*APIBatchShortResponse, error)
	APIUserShortDelete(context.Context, *APIUserShortDeleteRequest) (*APIUserShortDeleteResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) SimpleShort(context.Context, *SimpleShortRequest) (*SimpleShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleShort not implemented")
}
func (UnimplementedShortenerServer) SimpleUnshort(context.Context, *SimpleUnshortRequest) (*SimpleUnshortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleUnshort not implemented")
}
func (UnimplementedShortenerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerServer) APIUserURLs(context.Context, *APIUserURLRequest) (*APIUserURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIUserURLs not implemented")
}
func (UnimplementedShortenerServer) APIStats(context.Context, *APIStatsRequest) (*APIStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIStats not implemented")
}
func (UnimplementedShortenerServer) APIShort(context.Context, *APIShortRequest) (*APIShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIShort not implemented")
}
func (UnimplementedShortenerServer) APIBatchShort(context.Context, *APIBatchShortRequest) (*APIBatchShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIBatchShort not implemented")
}
func (UnimplementedShortenerServer) APIUserShortDelete(context.Context, *APIUserShortDeleteRequest) (*APIUserShortDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIUserShortDelete not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_SimpleShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).SimpleShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/SimpleShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).SimpleShort(ctx, req.(*SimpleShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_SimpleUnshort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleUnshortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).SimpleUnshort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/SimpleUnshort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).SimpleUnshort(ctx, req.(*SimpleUnshortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_APIUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).APIUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/APIUserURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).APIUserURLs(ctx, req.(*APIUserURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_APIStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).APIStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/APIStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).APIStats(ctx, req.(*APIStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_APIShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).APIShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/APIShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).APIShort(ctx, req.(*APIShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_APIBatchShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIBatchShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).APIBatchShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/APIBatchShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).APIBatchShort(ctx, req.(*APIBatchShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_APIUserShortDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUserShortDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).APIUserShortDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Shortener/APIUserShortDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).APIUserShortDelete(ctx, req.(*APIUserShortDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleShort",
			Handler:    _Shortener_SimpleShort_Handler,
		},
		{
			MethodName: "SimpleUnshort",
			Handler:    _Shortener_SimpleUnshort_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Shortener_Ping_Handler,
		},
		{
			MethodName: "APIUserURLs",
			Handler:    _Shortener_APIUserURLs_Handler,
		},
		{
			MethodName: "APIStats",
			Handler:    _Shortener_APIStats_Handler,
		},
		{
			MethodName: "APIShort",
			Handler:    _Shortener_APIShort_Handler,
		},
		{
			MethodName: "APIBatchShort",
			Handler:    _Shortener_APIBatchShort_Handler,
		},
		{
			MethodName: "APIUserShortDelete",
			Handler:    _Shortener_APIUserShortDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/grpc/shortener.proto",
}
