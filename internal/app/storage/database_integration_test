package storage

import (
	"database/sql"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/t1mon-ggg/go_shortner/internal/app/models"
)

func Test_integration_open(t *testing.T) {
	db := Postgresql{Conn: "postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable"}
	err := db.open()
	require.NoError(t, err)
}

func Test_integration_create(t *testing.T) {
	db := Postgresql{Conn: "postgresql://postgres:admin@127.0.0.1:5432/testCreate?sslmode=disable"}
	var err error
	db.db, err = sql.Open("postgres", db.Conn)
	require.NoError(t, err)
	err = db.create()
	require.NoError(t, err)
}

func Test_integration_Close(t *testing.T) {
	db := Postgresql{Conn: "postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable"}
	err := db.open()
	require.NoError(t, err)
	err = db.Close()
	require.NoError(t, err)
	err = db.Ping()
	require.Error(t, err)
}
func Test_DB_integration_Ping(t *testing.T) {
	db, err := NewPostgreSQL("postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable")
	require.NoError(t, err)
	err = db.Ping()
	require.NoError(t, err)
}

func Test_DB_integration_ReadByCookie(t *testing.T) {
	db, err := NewPostgreSQL("postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable")
	require.NoError(t, err)
	e := models.ClientData{Cookie: "cookie2", Key: "secret-key2", Short: []models.ShortData{{Short: "ABCDabcd", Long: "http://example2.org"}, {Short: "abcdabcd", Long: "http://example3.org"}}}
	data, err := db.ReadByCookie("cookie2")
	require.NoError(t, err)
	require.Equal(t, e, data)
}

func Test_DB_integration_ReadByTag(t *testing.T) {
	db, err := NewPostgreSQL("postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable")
	require.NoError(t, err)
	expected := models.ShortData{Short: "ABCDabcd", Long: "http://example2.org"}
	data, err := db.ReadByTag("ABCDabcd")
	require.NoError(t, err)
	require.Equal(t, expected, data)
}

func Test_DB_integration_TagByURL(t *testing.T) {
	db, err := NewPostgreSQL("postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable")
	require.NoError(t, err)
	expected := "ABCDabcd"
	data, err := db.TagByURL("http://example2.org")
	require.NoError(t, err)
	require.Equal(t, expected, data)
}

func Test_DB_integration_Write(t *testing.T) {
	db, err := NewPostgreSQL("postgresql://postgres:admin@127.0.0.1:5432/praktikum?sslmode=disable")
	require.NoError(t, err)
	value := models.ClientData{Cookie: "cookie2", Key: "secret-key2", Short: []models.ShortData{{Short: "AbCdAbCd", Long: "http://example4.org"}}}
	expected := models.ClientData{Cookie: "cookie2", Key: "secret-key2", Short: []models.ShortData{{Short: "ABCDabcd", Long: "http://example2.org"}, {Short: "abcdabcd", Long: "http://example3.org"}, {Short: "AbCdAbCd", Long: "http://example4.org"}}}
	err = db.Write(value)
	require.NoError(t, err)
	val, err := db.ReadByCookie("cookie2")
	require.Equal(t, expected, val)
	e1 := models.ClientData{Cookie: "cookie20", Key: "secret-key20", Short: []models.ShortData{{Short: "12345679", Long: "http://example5.org"}}}
	err = db.Write(e1)
	require.NoError(t, err)
	val, err = db.ReadByCookie("cookie20")
	require.Equal(t, e1, val)
}
